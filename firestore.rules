rules_version = '2';

// =====================
// Firestore Security Rules
// =====================
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    match /new_inventory/{inventoryId} {
      // Allow EVERYONE to read new inventory (public access for browsing new albums)
      allow read: if true;
      // Allow EVERYONE to list/query new inventory (public access for browsing new albums)
      allow list: if true;
      // Only admins can write/update new inventory
      allow write: if isAuthenticated() && isAdmin();
    }

    match /waitlist/{emailId} {
      allow read: if true;
      allow create: if !exists(/databases/$(database)/documents/waitlist/$(emailId));
      allow update, delete: if false;
    }

    // Admins Collection Rules
    match /admins/{adminId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == adminId;
    }

    // Users Collection Rules
    match /users/{userId} {
      // Let a user read/write their own document
      allow read, write: if isAuthenticated() && isOwner(userId);

      // Let admins read user documents
      allow read: if isAuthenticated() && isAdmin();
      
      // Allow authenticated users to read public profile data from other users
      // This includes: username, profilePictureUrl, profileCustomization (bio, favoriteGenres, favoriteAlbum)
      allow get: if isAuthenticated();
      
      // Allow authenticated users to query users collection for referral code validation and curator search
      // Optimized for curator search: only allow queries on isCurator field
      allow list: if isAuthenticated() && (
        // Allow general queries for referral system
        true ||
        // Specific optimization for curator queries
        resource.data.isCurator == true
      );
      
      // Allow authenticated users to update credit fields for referral system (simplified)
      allow update: if isAuthenticated();
      
      // Owner can update/delete their own document
      allow update, delete: if request.auth != null && request.auth.uid == userId;

      match /public/{documentId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && isOwner(userId);
      }

      match /wishlist/{albumId} {
        // Let owners read/write; let admins read
        allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
        allow write: if isAuthenticated() && isOwner(userId);
      }

      // Curator Reviews subcollection
      match /curatorReviews/{reviewId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && (
          resource.data.userId == request.auth.uid || isAdmin()
        );
        allow list: if isAuthenticated();
      }
    }

    // NEW: Referrals Collection Rules
    match /referrals/{referralId} {
      // Users can read referrals where they are the referrer
      allow read: if isAuthenticated() && (
        resource.data.referrerId == request.auth.uid ||
        isAdmin()
      );
      
      // Allow list/query operations for referral system functionality
      allow list: if isAuthenticated();
      
      // Allow creation of referral records during registration
      allow create: if isAuthenticated() && (
        request.resource.data.referredUserId == request.auth.uid ||
        request.resource.data.referrerId == request.auth.uid
      );
      
      // Allow updates for marking credits as awarded
      allow update: if isAuthenticated() && (
        resource.data.referrerId == request.auth.uid ||
        resource.data.referredUserId == request.auth.uid ||
        isAdmin()
      );
      
      // Only admins can delete referral records
      allow delete: if isAuthenticated() && isAdmin();
    }

    // Followers Collection Rules
    match /followers/{userId}/userFollowers/{followerId} {
      allow read: if isAuthenticated(); // Auth'd can read followers
      allow write: if isAuthenticated() && isOwner(userId); // Only user can modify
    }

    // Following Collection Rules
    match /following/{userId}/userFollowing/{followingId} {
      allow read: if isAuthenticated(); // Auth'd can read following
      allow write: if isAuthenticated() && isOwner(userId);
    }

    // Usernames Collection Rules
    match /usernames/{username} {
      allow read: if true;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.uid;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.uid;
    }

    // Orders Collection Rules
    match /orders/{orderId} {
      // Create: User can create their own orders, admins can create any
      allow create: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid || isAdmin()
      );
      
      // Update: User can update their own orders, curators can update assigned orders, admins can update any
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.curatorId == request.auth.uid ||
        isAdmin()
      );
      
      // Delete: Only admins can delete orders
      allow delete: if isAuthenticated() && isAdmin();
      
      // Read: Users can read their own orders, curators can read assigned orders, admins can read all, public can read completed orders
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.curatorId == request.auth.uid ||
        isAdmin() ||
        resource.data.status in ['kept', 'returnedConfirmed']
      );
      
      // List: Users can query their own orders, curators can query assigned orders, admins can query all
      allow list: if isAuthenticated() && (
        isAdmin() ||
        request.auth.uid == resource.data.userId ||
        request.auth.uid == resource.data.curatorId
      );
    }

    // Curator Reviews Collection Rules (moved to top level)
    match /curatorReviews/{reviewId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      allow list: if isAuthenticated();
    }

    // Albums Collection Rules
    match /albums/{albumId} {
      allow read: if true;
      // Admins can write everything on album docs
      allow write: if isAuthenticated() && isAdmin();

      // Loosened: any authenticated user can update ONLY the genreVotes field
      // This checks the changed keys between old and new data, not the full document keys
      allow update: if isAuthenticated() &&
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['genreVotes']);

      match /genreUserVotes/{userId} {
        // Allow all authenticated users to read genre votes
        allow read: if isAuthenticated();
        // Allow users to create, update, and delete their own genre vote
        allow create, update, delete: if isAuthenticated() && request.auth.uid == userId;
      }

      match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
        allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      }
    }

    // Inventory Collection Rules
    match /inventory/{inventoryId} {
      // Allow all authenticated users to read inventory (for curators to browse available albums)
      allow read: if isAuthenticated();
      // Allow list/query operations for curators to filter and search inventory
      allow list: if isAuthenticated();
      // Only admins can write/create inventory
      allow create, delete: if isAuthenticated() && isAdmin();
      // Allow admins full update access, and allow curators to update quantity for album confirmations
      allow update: if isAuthenticated() && (
        isAdmin() ||
        // Allow curators to update only quantity and lastUpdated fields (for album confirmations)
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['quantity', 'lastUpdated'])
      );
    }

    // Default Deny Rule
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 